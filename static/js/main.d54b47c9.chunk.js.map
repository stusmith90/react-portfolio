{"version":3,"sources":["components/Menu/Menu.js","components/Intro/Intro.js","containers/TimelineCard/TimelineCard.js","components/Timeline/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["menu","className","intro","TimelineCard","state","cardVisible","cardClicked","onVisibleCard","isVisible","setState","onCardClicked","classes","this","timelineCard","onClick","key","props","cardId","title","startDate","endDate","location","description","cardJoiner","parseInt","cardIndex","partialVisibility","onChange","offset","bottom","join","Component","Timeline","timelineCardData","map","card","logoImage","techlist","App","useState","data","setData","useEffect","a","axios","result","timelineCards","fetchData","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAUeA,G,YANF,kBACT,yBAAKC,UAAU,QACb,wBAAIA,UAAU,0BAAd,mBCWSC,G,MAbD,kBACV,yBAAKD,UAAU,SACb,wBAAIA,UAAU,6BAAd,QACA,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,qBACd,wBAAIA,UAAU,qBACd,wBAAIA,UAAU,qBACd,wBAAIA,UAAU,qBACd,wBAAIA,UAAU,yB,yDC4EPE,G,iNAjFbC,MAAQ,CACNC,aAAa,EACbC,aAAa,G,EAIfC,cAAgB,SAAAC,GACVA,GACF,EAAKC,SAAS,CAAEJ,aAAa,K,EAKjCK,cAAgB,WACV,EAAKN,MAAME,YACb,EAAKG,SAAS,CAAEH,aAAa,IAE7B,EAAKG,SAAS,CAAEH,aAAa,K,wEAM/B,IAAIK,EAAU,GAIVC,KAAKR,MAAMC,aAAeO,KAAKR,MAAME,YACvCK,EAAU,CAAC,iBAAkB,gBACpBC,KAAKR,MAAMC,cACpBM,EAAU,CAAC,iBAIb,IAAIE,EACF,6BAASZ,UAAU,sBAAsBa,QAASF,KAAKF,cAAeK,IAAKH,KAAKI,MAAMC,QACpF,yBAAKhB,UAAW,uCAEd,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,uBAAuBW,KAAKI,MAAME,OACjD,yBAAKjB,UAAU,uBAAuBW,KAAKI,MAAMG,UAAjD,MAA+DP,KAAKI,MAAMI,SAC1E,wBAAInB,UAAU,2BACZW,KAAKI,MAAMK,YAKjB,yBAAKpB,UAAU,0CACb,uBAAGA,UAAU,6BAA6BW,KAAKI,MAAMM,eAOvDC,EACF,yBAAKtB,UAAW,uBAAwBc,IAAKH,KAAKI,MAAMC,OAAS,WAC/D,yBAAKhB,UAAU,6BAA6BW,KAAKI,MAAMI,UAU3D,OAJsC,GAAlCI,SAASZ,KAAKI,MAAMS,aACtBZ,EAAe,CAACU,EAAYV,IAI5B,kBAAC,IAAD,CACEa,mBAAmB,EACnBC,SAAUf,KAAKL,cACfqB,OAAQ,CAACC,OA/CE,MAgDX,yBAAK5B,UAAW,2BAA6BU,EAAQmB,KAAK,MACvDjB,Q,GA3EgBkB,cCqBZC,G,MApBG,SAAChB,GACjB,IAAMiB,EAAmBjB,EAAMiB,iBAC/B,OACA,yBAAKhC,UAAU,YACZgC,EAAiBC,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CACgBC,UAAWD,EAAKC,UAChBjB,UAAWgB,EAAKhB,UAChBC,QAASe,EAAKf,QACdF,MAAOiB,EAAKjB,MACZG,SAAUc,EAAKd,SACfC,YAAaa,EAAKb,YAClBe,SAAUF,EAAKE,iBCerBC,MAxBf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAab,OAVAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IACnB,qBAFc,OACVC,EADU,OAIhBJ,EAAQI,EAAOL,KAAKM,eAJJ,2CAAH,qDAMfC,KACC,IAGD,yBAAK9C,UAAU,OACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,CAAUgC,iBAAkBO,MChBhBQ,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d54b47c9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Menu.scss';\n\nconst menu = () => (\n    <div className=\"Menu\">\n      <h1 className=\"Menu__title font--bold\">Stuart Smith</h1>\n    </div>\n);\n\nexport default menu;\n","import React from 'react';\n\nimport './Intro.scss';\n\nconst intro = () => (\n    <div className=\"Intro\">\n      <h3 className=\"Intro__heading font--bold\">DATA</h3>\n      <ul className=\"Intro__list\">\n        <li className=\"Intro__list-item\"></li>\n        <li className=\"Intro__list-item\"></li>\n        <li className=\"Intro__list-item\"></li>\n        <li className=\"Intro__list-item\"></li>\n        <li className=\"Intro__list-item\"></li>\n      </ul>\n    </div>\n);\n\nexport default intro;\n","import React, { Component } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\n\nimport './TimelineCard.scss';\n\nclass TimelineCard extends Component {\n\n  state = {\n    cardVisible: false,\n    cardClicked: false\n  };\n\n  // Callback from <VisibilitySensor>. Used in 'itemIsVisible' to add 'js-show-item' class\n  onVisibleCard = isVisible => {\n    if (isVisible) {\n      this.setState({ cardVisible: true });\n    }\n  };\n\n  // Callback to update state when TimelineCard is clicked \n  onCardClicked = () => {\n    if (this.state.cardClicked) {\n      this.setState({ cardClicked: false });\n    } else {\n      this.setState({ cardClicked: true });\n    }\n  };\n\n  render () {\n\n    let classes = [];\n    const offset = 200;\n\n    // Toggle classes for 'show' or 'expand'\n    if (this.state.cardVisible && this.state.cardClicked) {\n      classes = ['js-expand-card', 'js-show-card'];\n    } else if (this.state.cardVisible) {\n      classes = ['js-show-card'];\n    }\n\n    // Main timeline fragment\n    let timelineCard = (\n      <article className=\"TimelineCard__stack\" onClick={this.onCardClicked} key={this.props.cardId}>\n        <div className={'TimelineCard TimelineCard__top-card'}>\n          {/* <TimelineCardImage logoImage={getImage(this.props.logoImage, 'logo')} /> */}\n          <div className='TimelineCard__details'>\n            <div className=\"TimelineCard__title\">{this.props.title}</div>\n            <div className=\"TimelineCard__dates\">{this.props.startDate} - {this.props.endDate}</div>\n            <ul className=\"TimelineCard__locations\">\n             {this.props.location}\n            </ul>\n          </div>\n          \n        </div>\n        <div className=\"TimelineCard TimelineCard__bottom-card\">\n          <p className=\"TimelineCard__description\">{this.props.description}</p>\n        </div>\n      </article>\n    );\n\n    // Create the 'joiner' for each timeline card (i.e. the black line with end-date\n    // which joins the timeline cards from top to bottom)\n    let cardJoiner = (\n      <div className={'TimelineCard__joiner'} key={this.props.cardId + '_joiner'}>\n        <div className=\"TimelineCard__joiner-date\">{this.props.endDate}</div>\n      </div>\n    );\n\n    // Add the timeline card 'joiner' to all cards except the first item\n\n    if (parseInt(this.props.cardIndex) != 0) {\n      timelineCard = [cardJoiner, timelineCard];\n    }\n\n    return (\n      <VisibilitySensor\n        partialVisibility={true}\n        onChange={this.onVisibleCard}\n        offset={{bottom: offset}}>\n        <div className={'TimelineCard__container ' + classes.join(' ')}>\n          {timelineCard}\n        </div>\n      </VisibilitySensor>\n    );\n  };\n\n}\n\nexport default TimelineCard;\n","import React from 'react';\n\nimport TimelineCard from \"../../containers/TimelineCard/TimelineCard\";\n\nimport \"./Timeline.scss\";\n\nconst Timeline  = (props) => {\n  const timelineCardData = props.timelineCardData;\n  return(\n  <div className=\"Timeline\">\n    {timelineCardData.map((card) => (\n     <TimelineCard \n                     logoImage={card.logoImage}\n                     startDate={card.startDate}\n                     endDate={card.endDate}\n                     title={card.title}\n                     location={card.location}\n                     description={card.description}\n                     techlist={card.techlist}\n                     />\n  ))}\n   \n  </div>\n  )\n}\n\nexport default Timeline;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.scss';\n\nimport Menu from \"./components/Menu/Menu\";\nimport Intro from \"./components/Intro/Intro\";\nimport Timeline from \"./components/Timeline/Timeline\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        'TimelineData.json',\n      );\n      setData(result.data.timelineCards);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Sidebar__container\">\n        <Menu />\n        <Intro />\n        </div>\n        <Timeline timelineCardData={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}